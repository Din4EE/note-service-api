// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Din4EE/note-service-api/internal/repo (interfaces: NoteRepository)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=mocks/mock_note_repository.go -package=mocks . NoteRepository
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/Din4EE/note-service-api/internal/service/model"
	gomock "go.uber.org/mock/gomock"
)

// MockNoteRepository is a mock of NoteRepository interface.
type MockNoteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNoteRepositoryMockRecorder
}

// MockNoteRepositoryMockRecorder is the mock recorder for MockNoteRepository.
type MockNoteRepositoryMockRecorder struct {
	mock *MockNoteRepository
}

// NewMockNoteRepository creates a new mock instance.
func NewMockNoteRepository(ctrl *gomock.Controller) *MockNoteRepository {
	mock := &MockNoteRepository{ctrl: ctrl}
	mock.recorder = &MockNoteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoteRepository) EXPECT() *MockNoteRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNoteRepository) Create(arg0 context.Context, arg1 *model.Note) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNoteRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNoteRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockNoteRepository) Delete(arg0 context.Context, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNoteRepositoryMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNoteRepository)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockNoteRepository) Get(arg0 context.Context, arg1 uint64) (*model.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*model.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNoteRepositoryMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNoteRepository)(nil).Get), arg0, arg1)
}

// GetList mocks base method.
func (m *MockNoteRepository) GetList(arg0 context.Context, arg1 string, arg2, arg3 uint64) ([]*model.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*model.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockNoteRepositoryMockRecorder) GetList(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockNoteRepository)(nil).GetList), arg0, arg1, arg2, arg3)
}

// Update mocks base method.
func (m *MockNoteRepository) Update(arg0 context.Context, arg1 uint64, arg2 *model.NoteInfoUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockNoteRepositoryMockRecorder) Update(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNoteRepository)(nil).Update), arg0, arg1, arg2)
}
